{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home \ud83c\udfe0","text":"<p>Welcome to my showcase of my projects! Here you can find all the projects I have worked on, and some of the projects I am currently working on.</p>"},{"location":"#who-am-i","title":"Who am I?","text":"<p>Hey there! I'm Khaled \ud83d\udc4b, a software technical writer. I graduated with a bachelor's degree in computer science in 2021. During my four-year journey in college, I focused on the software development track. But when did technical writing come into the picture\ud83e\udd14?</p> <p>It all started during my participation in the \"Google Solution Challenge\" a global competition organized by Google. My graduation project team and I decided to participate, and our project managed to reach the top 10 out of over 820 projects from around the world! \ud83e\udd73</p> <p>As part of the competition, we had to provide detailed documentation to explain our project to the judges. This was my first real taste of technical writing. The feedback we received from our Google mentor, who was assigned to us by Google, was invaluable. It inspired me to dive deeper into the world of technical writing, and from that moment on, I knew I had found my calling. \ud83c\udf1f</p> Do you want to have a quick look at my CV? <p></p>"},{"location":"#online-presence","title":"Online Presence","text":"<ul> <li> LinkedIn Profile</li> <li> Dev.to Profile</li> <li> Upwork Profile</li> <li> Email</li> <li> GitHub Profile</li> <li> EqraaTech Profile</li> </ul>"},{"location":"awards/","title":"Awards \ud83e\udd47","text":"<ul> <li> <p> Our project \u201c E-OWl \u201dranked as one of the Top 10 projects globally and won the People\u2019s Choice Award in the Google Solution Challenge 2021 (Organized by Google)</p> </li> <li> <p> 2nd Place among my graduation class with (3.75 / 4.0) GPA (Future Academy Egypt)</p> </li> <li> <p> Ranked among the top teams at the InnovEgypt Training program and qualified for the final phase where I Ranked 4th at the Ideathon challenge (2020) (Organized by TICE)</p> </li> <li> <p> 1st Place in the Ministry of Higher Education Science Club competition. (Organized by the Ministry of Higher Education in Egypt)</p> </li> <li> <p> Participated in Dell Envision the Future 20-21 Competition and was successfully qualified to the second phase (Design Report submission ) (Organized by Dell Technologies)</p> </li> </ul>"},{"location":"projects/","title":"Projects","text":""},{"location":"projects/#adspostx-docs","title":"AdsPostX Docs","text":"Want to view it \ud83d\udc40, Click here! <p>Responsible for creating and maintaining the documentation for the AdsPostX platform. The documentation is designed to help users understand the platform and how to use it effectively. The documentation includes detailed guides on how to use the platform, API documentation, FAQs, and troubleshooting tips.</p>"},{"location":"projects/#nagwa-documentation","title":"Nagwa Documentation","text":"<p>This project is an internal documentation \ud83e\udd2b</p> <p>Unfortunately, I can't share the documentation for this project. However, I can provide a brief overview of the project.</p> <ul> <li> <p>Collaborated closely with the development team (Flutter &amp; JS) to produce comprehensive and maintainable technical documentation, highlighting code structure and implementation details.</p> </li> <li> <p>Proficiently documented essential APIs vital to the development team's workflow, ensuring clarity and accuracy in the documentation.</p> </li> <li> <p>Implemented an efficient documentation process using \"Mkdocs\" for our static documentation site, facilitating the transition from Google Docs.</p> </li> <li> <p>Authored two user manuals tailored to diverse audiences, providing clear and concise instructions for effective app usage.</p> </li> </ul> <p>And the most exciting part for me is \u2b07\ufe0f</p> <ul> <li> <p>Applied my technical expertise in Dart, Flutter, Firebase, and API integration to actively contribute to the Flutter team's efforts.</p> </li> <li> <p>Developed innovative features within \"Nagwa Classes for Students,\" \"Nagwa Classes for Educators,\" and \"Nagwa CRM\".</p> </li> <li> <p>Identified and resolved critical bugs reported by the testing team,</p> </li> </ul>"},{"location":"projects/#fabrication-tools-user-guide","title":"Fabrication Tools User Guide","text":"Want to view it \ud83d\udc40, Click here! <p>This project has been done as a part of freelance work for Allied BIM. The project is a user guide for the fabrication tools in Revit. The user guide is designed to help the users understand the fabrication tools in Revit and how to use them effectively.</p>"},{"location":"projects/#e-owl-docs","title":"E-Owl Docs","text":"Want to view it \ud83d\udc40, Click here! <p>This is the final documentation for our graduation project \"E-Owl\". It includes a detailed explanation of the project, including how we built it, supported by diagrams and screenshots.</p>"},{"location":"public-contributions/","title":"Public Contributions","text":""},{"location":"public-contributions/#devto","title":"Dev.to","text":"<p>From time to time, I write articles on Dev.to. you can check out my profile here.</p> Want to view my dev.to profile \ud83d\udc40, Click here! <p></p>"},{"location":"public-contributions/#eqraatech","title":"EqraaTech","text":"<p>I also write articles on EqraaTech but this time in Arabic. you can check out my profile here.</p> Want to view my EqraaTech profile \ud83d\udc40, Click here! <p></p>"},{"location":"work_experiance/","title":"Work Experience","text":""},{"location":"work_experiance/#adspostx","title":"AdsPostX","text":"<p>Technical Writer / QA Engineer (Feb 2024 - Present).</p> <ul> <li>Managing technical content on https://docs.adspostx.com.</li> <li>Documenting various APIs exposed to the public, providing clear and comprehensive information for developers to integrate with our platform.</li> <li>Creating integration guides and playbooks to assist users in seamlessly incorporating our services into their systems.</li> <li>Conducting thorough testing and reporting any issues or inconsistencies in the platform's behavior, while also suggesting enhancements to improve the user experience.</li> <li>Collaborating closely with both the product and technical teams to develop robust internal documentation, which serves as the foundation for our public-facing documentation</li> </ul>"},{"location":"work_experiance/#nagwa-technologies","title":"Nagwa Technologies","text":"<p>Technical Writer (May 2023 - Mar 2024).</p> <ul> <li>Collaborated closely with the development team (Flutter &amp; JS) to produce comprehensive and maintainable technical documentation, highlighting code structure and implementation details.</li> <li>Proficiently documented essential APIs vital to the development team's workflow, ensuring clarity and accuracy in the documentation.</li> <li>Implemented an efficient documentation process using \"Mkdocs\" for our static documentation site, facilitating the transition from Google Docs.</li> <li>Authored two user manuals tailored to diverse audiences, providing clear and concise instructions for effective app usage.</li> <li>Utilized tools like \"Draw.io\" to create informative diagrams, simplifying the understanding of complex concepts and processes for all stakeholders.</li> </ul> <p>\u26a0\ufe0fAnd One Interesting Thing \ud83d\udc68\u200d\ud83d\udcbb</p> <ul> <li>Applied my technical expertise in Dart, Flutter, Firebase, and API integration to actively contribute to the Flutter team's efforts.- Developed innovative features within \"Nagwa Classes for Students,\" \"Nagwa Classes for Educators,\" and \"Nagwa CRM\".</li> <li>Identified and resolved critical bugs reported by the testing team.</li> </ul>"},{"location":"work_experiance/#allied-bim","title":"Allied BIM","text":"<p>Technical Writer (Oct 2023 - Jan 2024).</p> <p>Collaborated with the development team to produce comprehensive and maintainable user guides for fabrication tools in Revit.</p>"},{"location":"work_experiance/#dell-technologies","title":"Dell Technologies","text":"<p>Summer Academy Intern (Aug 2020 - Sep 2020).</p> <ul> <li>Gained hands-on experience with a variety of technologies including IoT, Virtualization, and Virtual/Augmented Reality during my internship at Dell Technologies.</li> <li>Received training in Information Storage Management.</li> <li>Honed my soft skills and leadership abilities through training and workshops.</li> </ul>"},{"location":"work_experiance/#bamboogeeks","title":"BambooGeeks","text":"<p>Summer Trainee (Aug 2020 - Aug 2020).</p> <ul> <li>Interned at Bamboo Geeks.</li> <li>Gained knowledge about employability for developers in the tech field.</li> <li>Received an introduction to Design Thinking.</li> <li>Introduced to Agile Development methodologies.</li> <li>Acquired valuable skills in understanding customer needs.</li> <li>Learned to work efficiently in a dynamic environment.</li> </ul>"},{"location":"work_experiance/#information-technology-institute-iti","title":"Information Technology Institute (ITI)","text":"<p>Summer Trainee (Sep 2019 - Sep 2019).</p> <ul> <li>Interned at the Information Technology Institute (ITI).</li> <li>Gained hands-on experience in developing web applications.</li> <li>Utilized Python and MySQL for web application development.</li> <li>Understood the development process through practical experience.</li> <li>Applied knowledge to create functional and efficient web applications.</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"tasks/4-sale/","title":"4-Sale \ud83d\uded2 - API Documentation","text":"<p>Temporary Page Notice \ud83d\ude04</p> <p>This page is just created as a part of the \"4-Sale\" task in the recruitment process for the technical writer position. Effective 11-6-2024, it will be deleted.</p>"},{"location":"tasks/4-sale/#introduction","title":"Introduction","text":"<p>Welcome to the user guide for the Z Recommendation Engine API! This guide is designed to help developers and business stakeholders integrate personalized recommendations into their applications using the Z Recommendation Engine API.</p>"},{"location":"tasks/4-sale/#purpose","title":"Purpose","text":"<p>The Z Recommendation Engine API allows developers to access personalized recommendations for users, items, and categories. By integrating this API into your application, you can provide users with tailored recommendations based on their preferences and interactions.</p>"},{"location":"tasks/4-sale/#audience","title":"Audience","text":"<p>This user guide is intended for developers with some experience in using APIs, as well as business stakeholders who are involved in decision-making related to recommendation features.</p>"},{"location":"tasks/4-sale/authentication/","title":"Authentication \ud83d\udd12","text":"<p>The Z Recommendation Engine API uses token-based authentication to secure access to its endpoints. Developers must obtain an access token to authenticate their requests and access the API resources. This section provides an overview of the authentication process, including obtaining and using access tokens.</p>"},{"location":"tasks/4-sale/authentication/#authentication-flow","title":"Authentication Flow","text":"<p>The authentication flow for the Z Recommendation Engine API involves the following steps:</p> <ol> <li> <p>Request Access Token: Developers must request an access token by providing their client ID and client secret to the authentication server.</p> </li> <li> <p>Receive Access Token: Upon successful authentication, the server issues an access token that developers can use to authenticate their API requests.</p> </li> <li> <p>Include Access Token: Developers must include the access token in the <code>Authorization</code> header of their API requests to authenticate and authorize access to the API resources.</p> </li> </ol>"},{"location":"tasks/4-sale/authentication/#access-token-request","title":"Access Token Request","text":"<p>To request an access token, developers must send a <code>POST</code> request to the authentication server's token endpoint with the following parameters:</p>"},{"location":"tasks/4-sale/authentication/#api-endpoint","title":"API Endpoint","text":"<p>HTTP Method: <code>POST</code></p> <pre><code>{REPLACE_WITH_YOUR_BASE_URL}/auth/token\n</code></pre>"},{"location":"tasks/4-sale/authentication/#headers","title":"Headers","text":"Key Value <code>Content-Type</code> <code>application/json</code>"},{"location":"tasks/4-sale/authentication/#request-body","title":"Request Body","text":"<p>The request body must include the following parameters:</p> Field Description <code>client_id</code> The client ID provided by the API administrator <code>client_secret</code> The client secret provided by the API administrator"},{"location":"tasks/4-sale/authentication/#request-code-example","title":"Request Code Example","text":"<pre><code>Future&lt;void&gt; refreshToken(String refreshToken) async {\n  var response = await http.post(\n    Uri.parse('http://auth.example.com/token'),\n    body: {\n      'grant_type': 'refresh_token',\n      'refresh_token': refreshToken,\n      'client_id': 'your_client_id',\n      'client_secret': 'your_client_secret',\n    },\n  );\n\n  if (response.statusCode == 200) {\n    var newAccessToken = jsonDecode(response.body)['access_token'];\n    print('New Access Token: $newAccessToken');\n  } else {\n    print('Failed to refresh token: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/authentication/#access-token-response","title":"Access Token Response","text":"<p>Upon successful authentication, the server responds with an access token in the following format:</p> <p>The response includes the following fields:</p> Field Description <code>access_token</code> The access token used to authenticate requests. <code>token_type</code> The type of token issued (e.g., <code>Bearer</code>). <code>expires_in</code> The token's expiration time in seconds."},{"location":"tasks/4-sale/authentication/#response-example","title":"Response Example","text":"<pre><code>{\n  \"access_token\": \"YOUR_ACCESS_TOKEN\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600\n}\n</code></pre>"},{"location":"tasks/4-sale/authentication/#error-responses","title":"Error Responses","text":"404 Not Found401 Unauthorized500 Internal Server Error <pre><code>{\n\"error\": \"invalid_client\",\n\"error_description\": \"Client not found.\"\n}\n</code></pre> <pre><code>{\n\"error\": \"invalid_client\",\n\"error_description\": \"Invalid client credentials.\"\n}\n</code></pre> <pre><code>{\n\"error\": \"server_error\",\n\"error_description\": \"An internal server error occurred.\"\n}\n</code></pre>"},{"location":"tasks/4-sale/draft/","title":"Draft","text":"<p>API Documentation  This test is designed to assess your ability to create clear, concise, and accurate technical documentation for an API, specifically focusing on a recommendation engine API. Scenario:</p> <p>You are a technical writer for Z Corp., a company that develops recommendation engine software. You have been tasked with documenting the Z Recommendation Engine API, which allows developers to integrate personalized recommendations into their applications.</p> <p>Task:</p> <p>Using the provided API reference and sample code snippets, write a detailed user guide for the Recommendation Engine API. The user guide should be targeted towards developers with some experience in using APIs alongside business stakeholders</p> <p>Specific Requirements:</p> <p>Clarity and Conciseness: Present information clearly and concisely, avoiding unnecessary jargon.</p> <p>Structure and Organization: Organize the user guide logically, with clear headings and subheadings.</p> <p>Accuracy: Ensure all information is accurate and based on the provided API reference.</p> <p>Style and Tone: Maintain a professional and objective tone throughout the documentation.</p> <p>Completeness: Cover all essential aspects of the API v2, including:</p> <p>Authentication and authorization methods with advanced token management techniques (e.g., refresh tokens).</p> <p>Available API endpoints with detailed descriptions of their functionalities (Use the sample endpoints below as a reference):</p> <p>Sample Endpoints:</p> <p>/users/{user_id}/recommendations: Get personalized recommendations for a specific user, with options to filter by category, brand, or price range (use query parameters).</p> <p>/items/{item_id}/similar_items: Get a list of similar items to a specific item, including a confidence score for each recommendation.</p> <p>/categories/{category_id}/recommendations: Get recommendations for items in a specific category, with the ability to specify the number of recommendations returned.</p> <p>/feedback: Send feedback on a recommendation (upvote/downvote) and optionally provide a reason for the feedback (POST request with JSON body).</p> <p>/user-data/{user_id}/interactions: Manage user interaction data (e.g., views, purchases) to personalize recommendations. This endpoint supports various actions like creating, updating, and deleting interactions (use appropriate HTTP methods with JSON body).</p> <p>/algorithms/{algorithm_id}/configure: Configure recommendation algorithms by adjusting parameters like weighting factors and collaborative filtering methods (PUT request with JSON body).</p> <p>Request and response formats (including detailed data structures for JSON objects).</p> <p>Error handling with comprehensive error codes and descriptions.</p> <p>Advanced features like:</p> <p>A /status endpoint for real-time API health checks.</p> <p>Pagination support for retrieving large recommendation lists efficiently.</p> <p>Caching mechanisms to optimize performance.</p> <p>Code examples demonstrating usage of various functionalities (Include code snippets for at least 3 different endpoints).</p> <p>End of task-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------</p>"},{"location":"tasks/4-sale/endpoints/","title":"Available API Endpoints","text":"<p>The Z Recommendation Engine API offers a range of endpoints to enable developers to retrieve personalized recommendations, manage user interactions, configure recommendation algorithms, and more. In this section, we'll explore each endpoint in detail, including their functionalities and usage.</p>"},{"location":"tasks/4-sale/endpoints/#endpoints-list","title":"Endpoints List","text":"<ol> <li>API Health Check Status</li> <li>Get User Recommendations</li> <li>Get Similar Items</li> <li>Configure Recommendation Algorithm</li> <li>Handle User Interactions</li> <li>Get Recommended Item Based on Category</li> <li>Submit User Feedback</li> </ol> <p>Authentication Required</p> <p>Some endpoints require authentication to access protected resources. Make sure to include the access token in the <code>Authorization</code> header of your requests to authenticate successfully. To learn more about authentication, refer to the Authentication section.</p>"},{"location":"tasks/4-sale/endpoints/configure_algorithm/","title":"Configure Recommendation Algorithms","text":"<p>This endpoint allows developers to configure recommendation algorithms by adjusting parameters such as weighting factors and collaborative filtering methods. The configuration is performed using a PUT request with a JSON body.</p>"},{"location":"tasks/4-sale/endpoints/configure_algorithm/#endpoint","title":"Endpoint","text":"<p>HTTP Method: <code>PUT</code></p> Configure Recommendation Algorithm Endpoint<pre><code>{REPLACE_WITH_YOUR_BASE_URL}/algorithms/{algorithm_id}/configure\n</code></pre>"},{"location":"tasks/4-sale/endpoints/configure_algorithm/#path-parameters","title":"Path Parameters","text":"Parameter Name Type Description <code>algorithm_id</code> string The unique identifier of the recommendation algorithm to configure."},{"location":"tasks/4-sale/endpoints/configure_algorithm/#headers","title":"Headers","text":"Parameter Type Description <code>Authorization</code> string Bearer token to authenticate the API request. <code>Content-Type</code> string The format of the request body. Value: <code>application/json</code>"},{"location":"tasks/4-sale/endpoints/configure_algorithm/#request-body","title":"Request Body","text":"Parameter Name Type Description <code>weighting_factors</code> object The weighting factors for the algorithm. <code>collaborative_filtering</code> object The collaborative filtering method to use."},{"location":"tasks/4-sale/endpoints/configure_algorithm/#request-code-example","title":"Request Code Example","text":"<pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  String accessToken = 'your_access_token_here';\n  String algorithmId = 'xyz123';\n\n  configureAlgorithm(\n    algorithmId,\n    {\n      'weighting_factor': 0.8,\n      'collaborative_filtering_method': 'matrix_factorization'\n    },\n    accessToken,\n  );\n}\n\nFuture&lt;void&gt; configureAlgorithm(String algorithmId, Map&lt;String, dynamic&gt; configData, String accessToken) async {\n  var url = Uri.parse('http://api.example.com/algorithms/$algorithmId/configure');\n  var response = await http.put(\n    url,\n    headers: &lt;String, String&gt;{\n      'Authorization': 'Bearer $accessToken',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(configData),\n  );\n\n  if (response.statusCode == 200) {\n    print('Algorithm configured successfully');\n  } else {\n    print('Failed to configure algorithm: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/configure_algorithm/#response","title":"Response","text":"<p>The response will indicate whether the algorithm configuration was successful or not.</p> 200400401404500 <pre><code>{\n    \"message\": \"Algorithm configured successfully\"\n}\n</code></pre> <pre><code>{\n    \"message\": \"Failed to configure algorithm\"\n}\n</code></pre> <pre><code>{\n    \"message\": \"Unauthorized\"\n}\n</code></pre> <pre><code>{\n    \"message\": \"Algorithm not found\"\n}\n</code></pre> <pre><code>{\n    \"message\": \"Internal server error\"\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/items_for_category/","title":"Fetching Items for Category Endpoint","text":"<p>Developers can use this endpoint to get recommendations for items in a specific category. The endpoint allows specifying the number of recommendations returned, providing flexibility in customizing the recommendation list.</p>"},{"location":"tasks/4-sale/endpoints/items_for_category/#endpoint","title":"Endpoint","text":"<p>HTTP Method: <code>GET</code></p> Items for Category Endpoint<pre><code>{REPLACE_WITH_YOUR_BASE_URL}/categories/{category_id}/recommendations\n</code></pre>"},{"location":"tasks/4-sale/endpoints/items_for_category/#path-parameters","title":"Path Parameters","text":"Parameter Name Type Description <code>category_id</code> string The unique identifier of the category for which recommendations are requested."},{"location":"tasks/4-sale/endpoints/items_for_category/#headers","title":"Headers","text":"Parameter Type Description <code>Authorization</code> string Bearer token to authenticate the API request. <code>Content-Type</code> string The format of the request body. Value: <code>application/json</code>"},{"location":"tasks/4-sale/endpoints/items_for_category/#query-parameters","title":"Query Parameters","text":"Parameter Name Type Description <code>limit</code> integer The maximum number of recommendations to return. default: 10 <code>page</code> integer The page number for paginated results. default: 1"},{"location":"tasks/4-sale/endpoints/items_for_category/#request-code-example","title":"Request Code Example","text":"<p>The following example is in Dart using the <code>http</code> package.</p> Fetching Items for Category Example<pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  getCategoryRecommendations('123');\n}\n\nFuture&lt;void&gt; getCategoryRecommendations(String categoryId) async {\n  String accessToken = 'your_access_token_here';\n\n  var url = Uri.parse('http://api.example.com/categories/$categoryId/recommendations');\n  var response = await http.get(\n    url,\n    headers: &lt;String, String&gt;{\n      'Authorization': 'Bearer $accessToken',\n    },\n  );\n\n  if (response.statusCode == 200) {\n    var data = jsonDecode(response.body);\n    print(data);\n  } else {\n    print('Failed to load category recommendations: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/items_for_category/#response","title":"Response","text":"<p>The response will be a JSON object containing the list of recommended <code>items</code> for the specified category. each item will have the following attributes:</p> Attribute Type Description <code>id</code> string The unique identifier of the item. <code>name</code> string The name of the item. <code>price</code> float The price of the item. <code>category</code> string The category of the item. <code>brand</code> string The brand of the item. <code>image_url</code> string The URL of the item's image. Response Example<pre><code>{\n  \"items\": [\n    {\n      \"id\": \"123\",\n      \"name\": \"Product Name\",\n      \"price\": 100.0,\n      \"category\": \"Category Name\",\n      \"brand\": \"Brand Name\",\n      \"image_url\": \"https://example.com/image.jpg\"\n    },\n    {\n      \"id\": \"456\",\n      \"name\": \"Product Name 2\",\n      \"price\": 200.0,\n      \"category\": \"Category Name\",\n      \"brand\": \"Brand Name\",\n      \"image_url\": \"https://example.com/image2.jpg\"\n    }\n  ]\n}\n</code></pre> <p>Implement Cache Mechanism</p> <p>To optimize performance, consider implementing a caching mechanism to store and retrieve recommendations efficiently.</p>"},{"location":"tasks/4-sale/endpoints/items_for_category/#error-responses","title":"Error Responses","text":"UnauthorizedNot Found <pre><code>{\n  \"error\": \"401\",  \n  \"message\": \"Unauthorized\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"404\",  \n  \"message\": \"Category not found\"\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/similer_items/","title":"Fetching Similar Items","text":"<p>This endpoint enables developers to retrieve a list of items similar to a specific item, along with a confidence score for each recommendation. This can help users discover related items based on their interests.</p>"},{"location":"tasks/4-sale/endpoints/similer_items/#endpoint","title":"Endpoint","text":"<p>HTTP Method: <code>GET</code></p> Similar Items Endpoint<pre><code>{REPLACE_WITH_YOUR_BASE_URL}/items/{item_id}/similar\n</code></pre>"},{"location":"tasks/4-sale/endpoints/similer_items/#path-parameters","title":"Path Parameters","text":"Parameter Name Type Description <code>item_id</code> string The unique identifier of the item for which similar items are requested."},{"location":"tasks/4-sale/endpoints/similer_items/#headers","title":"Headers","text":"Parameter Type Description <code>Authorization</code> string Bearer token to authenticate the API request. <code>Content-Type</code> string The format of the request body. Value: <code>application/json</code>"},{"location":"tasks/4-sale/endpoints/similer_items/#query-parameters","title":"Query Parameters","text":"Parameter Name Type Description <code>limit</code> integer The maximum number of similar items to return. default: 10 <code>page</code> integer The page number for paginated results. default: 1"},{"location":"tasks/4-sale/endpoints/similer_items/#request-code-example","title":"Request Code Example","text":"<p>The following example is in Dart using the <code>http</code> package.</p> Fetching Similar Items Example<pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  getSimilarItems('123');\n}\n\nFuture&lt;void&gt; getSimilarItems(String itemId) async {\n  String accessToken = 'your_access_token_here';\n\n  var url = Uri.parse('http://api.example.com/items/$itemId/similar_items');\n  var response = await http.get(\n    url,\n    headers: &lt;String, String&gt;{\n      'Authorization': 'Bearer $accessToken',\n    },\n  );\n\n  if (response.statusCode == 200) {\n    var data = jsonDecode(response.body);\n    print(data);\n  } else {\n    print('Failed to load similar items: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/similer_items/#response","title":"Response","text":"<p>Implement Cache Mechanism</p> <p>To optimize performance, consider implementing a caching mechanism to store and retrieve recommendations efficiently.</p> <p>The API response contains an array of <code>items</code> similar to the requested item, along with a confidence score for each recommendation. each item in the array contains the following fields:</p> Field Type Description <code>id</code> string The unique identifier of the item. <code>name</code> string The name of the item. <code>price</code> number The price of the item. <code>image_url</code> string The URL of the item's image. <code>confidence</code> number A confidence score indicating the similarity of the item to the requested item. <pre><code>{\n  \"items\": [\n    {\n      \"id\": \"456\",\n      \"name\": \"Product Name\",\n      \"price\": 99.99,\n      \"image_url\": \"http://example.com/image.jpg\",\n      \"confidence\": 0.85\n    },\n    {\n      \"id\": \"789\",\n      \"name\": \"Another Product\",\n      \"price\": 49.99,\n      \"image_url\": \"http://example.com/another.jpg\",\n      \"confidence\": 0.75\n    }\n  ]\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/similer_items/#error-responses","title":"Error Responses","text":"UnauthorizedNot Found <pre><code>{\n  \"error\": \"401\",  \n  \"message\": \"Unauthorized\"\n}\n</code></pre> <pre><code>{\n  \"error\": \"404\",  \n  \"message\": \"Item not found\"\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/status/","title":"API Health Check Status","text":"<p>This endpoint allows developers to perform real-time health checks on the API to ensure its availability and responsiveness.</p>"},{"location":"tasks/4-sale/endpoints/status/#endpoint","title":"Endpoint","text":"<p>HTTP Method: <code>GET</code></p> <pre><code>{REPLACE_WITH_YOUR_BASE_URL}/status\n</code></pre>"},{"location":"tasks/4-sale/endpoints/status/#headers","title":"Headers","text":"<p>No headers are required for this endpoint.</p>"},{"location":"tasks/4-sale/endpoints/status/#request-code-example","title":"Request Code Example","text":"<pre><code>import 'package:http/http.dart' as http;\n\nvoid main() {\n  checkApiHealth();\n}\n\nFuture&lt;void&gt; checkApiHealth() async {\n  var url = Uri.parse('http://api.example.com/status');\n  var response = await http.get(url);\n\n  if (response.statusCode == 200) {\n    print('API is healthy');\n  } else {\n    print('Failed to check API health: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/status/#response","title":"Response","text":"<p>The API returns a <code>200 OK</code> status code if the service is healthy and operational. If the service is down or experiencing issues, an appropriate error status code is returned.</p>"},{"location":"tasks/4-sale/endpoints/status/#response-codes","title":"Response Codes","text":"<p>=== 200 OK     The API is healthy and operational. === 503 Service Unavailable     The API is down or experiencing issues. === 500 Internal Server Error     An internal server error occurred.</p>"},{"location":"tasks/4-sale/endpoints/submit_feedback/","title":"Send Feedback on a Recommendation","text":"<p>This endpoint allows users to provide feedback on recommendations through upvote/downvote actions. Users can optionally provide a reason for their feedback via a POST request with a JSON body.</p>"},{"location":"tasks/4-sale/endpoints/submit_feedback/#endpoint","title":"Endpoint","text":"<p>HTTP Method: <code>POST</code></p> Feedback on Recommendation Endpoint<pre><code>{REPLACE_WITH_YOUR_BASE_URL}/feedback\n</code></pre>"},{"location":"tasks/4-sale/endpoints/submit_feedback/#headers","title":"Headers","text":"Parameter Type Description <code>Authorization</code> string Bearer token to authenticate the API request. <code>Content-Type</code> string The format of the request body. Value: <code>application/json</code>"},{"location":"tasks/4-sale/endpoints/submit_feedback/#request-body","title":"Request Body","text":"Parameter Name Type Description <code>recommendation_id</code> string The unique identifier of the recommendation for which feedback is provided. <code>feedback</code> string The user's feedback on the recommendation where <code>upvote</code> indicates a positive feedback and <code>downvote</code> indicates a negative feedback. <code>reason</code> string The reason for the user's feedback. (Optional)"},{"location":"tasks/4-sale/endpoints/submit_feedback/#request-code-example","title":"Request Code Example","text":"<p>The following example is in Dart using the <code>http</code> package.</p> Sending Feedback Example<pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  sendFeedback('123', 'upvote', 'Great recommendation!');\n}\n\nFuture&lt;void&gt; sendFeedback(String recommendationId, String feedback, String reason) async {\n  String accessToken = 'your_access_token_here';\n  var feedbackData = {\n    'recommendation_id': recommendationId,\n    'feedback': feedback,\n    'reason': reason\n  };\n\n  var url = Uri.parse('http://api.example.com/feedback');\n  var response = await http.post(\n    url,\n    headers: &lt;String, String&gt;{\n      'Authorization': 'Bearer $accessToken',\n      'Content-Type': 'application/json'\n    },\n    body: jsonEncode(feedbackData),\n  );\n\n  if (response.statusCode == 200) {\n    print('Feedback submitted successfully');\n  } else {\n    print('Failed to submit feedback: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/submit_feedback/#response","title":"Response","text":"<p>The response will indicate whether the feedback was successfully submitted or if there was an error in the request. The status code <code>200</code> indicates a successful submission.</p> <pre><code>{\n  \"message\": \"Feedback submitted successfully\"\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/submit_feedback/#error-response","title":"Error Response","text":"Missing Required FieldsInvalid Feedback ValueInternal Server Error <p>If the required fields are missing in the request body, the API will return an error response with a status code <code>400</code>.</p> <pre><code>{\n  \"error\": \"400\", \n  \"message\": \"Missing required fields: recommendation_id, feedback\"\n}\n</code></pre> <p>If the <code>feedback</code> value is not valid (i.e., not <code>upvote</code> or <code>downvote</code>), the API will return an error response with a status code <code>400</code>.</p> <pre><code>{\n  \"error\": \"400\", \n  \"message\": \"Invalid feedback value. Please provide 'upvote' or 'downvote'.\"\n}\n</code></pre> <p>If there is an issue on the server side, the API will return an error response with a status code <code>500</code>.</p> <pre><code>{\n  \"error\": \"500\", \n  \"message\": \"Internal Server Error. Please try again later.\"\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/user_interactions/","title":"Manage User Interaction Data","text":"<p>This endpoint allows you to manage user interaction data, such as views, purchases, and likes, to personalize recommendations for users. You can create, update, and delete interactions using this endpoint.</p>"},{"location":"tasks/4-sale/endpoints/user_interactions/#endpoint","title":"Endpoint","text":"<p>HTTP Methods: </p> <ul> <li><code>POST</code> : Create a new interaction for the user.</li> <li><code>PUT</code> : Update an existing interaction for the user.</li> <li><code>DELETE</code> : Delete an interaction for the user.</li> </ul> User Interaction Data Endpoint<pre><code>{REPLACE_WITH_YOUR_BASE_URL}/user-data/{user_id}/interactions\n</code></pre>"},{"location":"tasks/4-sale/endpoints/user_interactions/#path-parameters","title":"Path Parameters","text":"Parameter Name Type Description <code>user_id</code> string The unique identifier of the user for whom interactions are managed."},{"location":"tasks/4-sale/endpoints/user_interactions/#headers","title":"Headers","text":"Parameter Type Description <code>Authorization</code> string Bearer token to authenticate the API request. <code>Content-Type</code> string The format of the request body. Value: <code>application/json</code>"},{"location":"tasks/4-sale/endpoints/user_interactions/#request-body","title":"Request Body","text":"POST Request BodyPUT Request BodyDELETE Request Body Parameter Name Type Description <code>item_id</code> string The unique identifier of the item the user interacted with. <code>interaction_type</code> string The type of interaction (e.g., <code>view</code>, <code>purchase</code>, <code>like</code>). <code>timestamp</code> string The timestamp of the interaction in ISO 8601 format. Parameter Name Type Description <code>interaction_id</code> string The unique identifier of the interaction to update. <code>item_id</code> string The unique identifier of the item the user interacted with. <code>interaction_type</code> string The type of interaction (e.g., <code>view</code>, <code>purchase</code>, <code>like</code>). <code>timestamp</code> string The timestamp of the interaction in ISO 8601 format. Parameter Name Type Description <code>interaction_id</code> string The unique identifier of the interaction to delete."},{"location":"tasks/4-sale/endpoints/user_interactions/#request-code-examples","title":"Request Code Examples","text":"<p>The following examples are in Dart using the <code>http</code> package.</p> Creating an Interaction (POST Request)Updating Interaction (PUT Request)Deleting an Interaction (DELETE Request) <pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nFuture&lt;void&gt; createInteraction(String userId, String interactionType, String itemId, String timestamp, String accessToken) async {\nvar interactionData = {\n    'interaction_type': interactionType,\n    'item_id': itemId,\n    'timestamp': timestamp\n};\n\nvar url = Uri.parse('http://api.example.com/user-data/$userId/interactions');\nvar response = await http.post(\n    url,\n    headers: &lt;String, String&gt;{\n    'Authorization': 'Bearer $accessToken',\n    'Content-Type': 'application/json'\n    },\n    body: jsonEncode(interactionData),\n);\n\nif (response.statusCode == 200) {\n    print('Interaction created successfully');\n} else {\n    print('Failed to create interaction: ${response.statusCode}');\n}\n}\n</code></pre> <pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nFuture&lt;void&gt; updateInteraction(String userId, String interactionId, String interactionType, String timestamp, String accessToken) async {\nvar interactionData = {\n'interaction_id': interactionId,\n'interaction_type': interactionType,\n'timestamp': timestamp\n};\n\nvar url = Uri.parse('http://api.example.com/user-data/$userId/interactions');\nvar response = await http.put(\nurl,\nheaders: &lt;String, String&gt;{\n    'Authorization': 'Bearer $accessToken',\n    'Content-Type': 'application/json'\n},\nbody: jsonEncode(interactionData),\n);\n\nif (response.statusCode == 200) {\nprint('Interaction updated successfully');\n} else {\nprint('Failed to update interaction: ${response.statusCode}');\n}\n}\n</code></pre> <pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nFuture&lt;void&gt; deleteInteraction(String userId, String interactionId, String accessToken) async {\nvar interactionData = {\n'interaction_id': interactionId\n};\n\nvar url = Uri.parse('http://api.example.com/user-data/$userId/interactions');\nvar response = await http.delete(\nurl,\nheaders: &lt;String, String&gt;{\n    'Authorization': 'Bearer $accessToken',\n    'Content-Type': 'application/json'\n},\nbody: jsonEncode(interactionData),\n);\n\nif (response.statusCode == 200) {\nprint('Interaction deleted successfully');\n} else {\nprint('Failed to delete interaction: ${response.statusCode}');\n}\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/user_interactions/#response","title":"Response","text":"<p>The response will be a status code indicating the success or failure of the request.</p> 200400401404500 <p>The request was successful.</p> <p>The request was invalid or malformed.</p> <p>The request was not authorized.</p> <p>The requested resource was not found.</p> <p>An error occurred on the server.    </p>"},{"location":"tasks/4-sale/endpoints/user_recomendations/","title":"Fetching User's Personalized Recommendations","text":"<p>This endpoint allows developers to retrieve personalized recommendations for a specific user based on their preferences and behavior. Developers can specify optional query parameters to filter recommendations by category, brand, or price range.</p>"},{"location":"tasks/4-sale/endpoints/user_recomendations/#endpoint","title":"Endpoint","text":"<p>HTTP Method: <code>GET</code></p> Personalized Recommendations Endpoint<pre><code>{REPLACE_WITH_YOUR_BASE_URL}/users/{user_id}/recommendations\n</code></pre>"},{"location":"tasks/4-sale/endpoints/user_recomendations/#path-parameters","title":"Path Parameters","text":"Parameter Name Type Description <code>user_id</code> string The unique identifier of the user for whom recommendations are requested."},{"location":"tasks/4-sale/endpoints/user_recomendations/#headers","title":"Headers","text":"Parameter Type Description <code>Authorization</code> string Bearer token to authenticate the API request. <code>Content-Type</code> string The format of the request body. Value: <code>application/json</code>"},{"location":"tasks/4-sale/endpoints/user_recomendations/#query-parameters","title":"Query Parameters","text":"Parameter Name Type Description <code>category</code> string Filter recommendations by category. <code>brand</code> string Filter recommendations by brand. <code>price_range</code> string Filter recommendations by price range. <code>limit</code> integer The maximum number of recommendations to return. default: 10 <code>page</code> integer The page number for paginated results. default: 1"},{"location":"tasks/4-sale/endpoints/user_recomendations/#request-code-example","title":"Request Code Example","text":"<p>The following example is in Dart using the <code>http</code> package.</p> Fetching Recommendations Example<pre><code>import 'dart:convert';\nimport 'package:http/http.dart' as http;\nvoid main() async {\n String accessToken = 'your_access_token_here';\n\n  var url = Uri.parse('http://api.example.com/users/$userId/recommendations?category=$category');\n  var response = await http.get(\n    url,\n    headers: &lt;String, String&gt;{\n      'Authorization': 'Bearer $accessToken',\n    },\n  );\n\n  if (response.statusCode == 200) {\n    var data = jsonDecode(response.body);\n    print(data);\n  } else {\n    print('Failed to load recommendations: ${response.statusCode}');\n  }\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/user_recomendations/#response","title":"Response","text":"<p>Implement Cache Mechanism</p> <p>To optimize performance, consider implementing a caching mechanism to store and retrieve recommendations efficiently.</p> <p>A JSON object containing a list of recommended items tailored to the user's preferences.</p> Field Type Description <code>user_id</code> string The unique identifier of the user. <code>recommendations</code> array An array of recommended items."},{"location":"tasks/4-sale/endpoints/user_recomendations/#recommendations-item-fields","title":"<code>recommendations</code> Item Fields","text":"Field Type Description <code>item_id</code> string The unique identifier of the recommended item. <code>name</code> string The name of the recommended item. <code>category</code> string The category of the recommended item. <code>brand</code> string The brand of the recommended item. <code>price</code> float The price of the recommended item.  Success Response Example <pre><code>{\n  \"user_id\": \"123\",\n  \"recommendations\": [\n    {\n      \"item_id\": \"12345\",\n      \"name\": \"Product A\",\n      \"category\": \"Electronics\",\n      \"brand\": \"Brand X\",\n      \"price\": 99.99\n    },\n    {\n      \"item_id\": \"67890\",\n      \"name\": \"Product B\",\n      \"category\": \"Clothing\",\n      \"brand\": \"Brand Y\",\n      \"price\": 49.99\n    }\n  ]\n}\n</code></pre>"},{"location":"tasks/4-sale/endpoints/user_recomendations/#error-responses","title":"Error Responses","text":"User Not FoundInvalid ParametersInternal Server Error <pre><code>{\n\"error\": \"404\",\n\"message\": \"User not found.\"\n}\n</code></pre> <pre><code>{\n\"error\": \"400\",\n\"message\": \"Invalid query parameters.\"\n}\n</code></pre> <pre><code>{\n\"error\": \"500\",\n\"message\": \"Internal server error. Please try again later.\"\n}\n</code></pre>"}]}